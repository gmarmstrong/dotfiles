#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# Print functions
print_header() {
    printf "\n\033[1m>> %s\033[0m\n\n" "$1"
}

print_error() {
    printf "\n\033[1;31mâœ— Error: %s\033[0m\n" "$1" >&2
}

# Verify we're running on macOS
if [[ "$(uname)" != "Darwin" ]]; then
    print_error "This script only works on macOS (Darwin)"
    exit 1
fi

# Parse flags
cleanup=false
while [[ $# -gt 0 ]]; do
    case $1 in
        --cleanup)
            cleanup=true
            shift
            ;;
        *)
            printf "Unknown option: %s\n" "$1"
            printf "Usage: %s [--cleanup]\n" "$0"
            exit 1
            ;;
    esac
done

# Update dotfiles
print_header "Updating dotfiles..."
git -C "$HOME/dotfiles" pull

# Update flake inputs
print_header "Updating config flake inputs..."
nix flake update --flake "$HOME/.config/nix"

# Detect hostname and verify it exists in flake
print_header "Detecting system configuration..."
hostname=$(scutil --get LocalHostName)
printf "Hostname: %s\n" "$hostname"

# Verify the configuration exists in the flake
if ! nix eval "$HOME/.config/nix#darwinConfigurations.$hostname.config.system.stateVersion" &>/dev/null; then
    print_error "Configuration for hostname '$hostname' not found in flake"
    printf "Available configurations:\n"
    nix eval --json "$HOME/.config/nix#darwinConfigurations" --apply 'builtins.attrNames' 2>/dev/null | grep -o '"[^"]*"' | tr -d '"'
    exit 1
fi

# Rebuild and apply config flake
print_header "Rebuilding and applying config flake..."
sudo darwin-rebuild switch --flake "$HOME/.config/nix#$hostname"

# Nix garbage collection and store optimization (optional)
if [ "$cleanup" = true ]; then
    print_header "Running nix garbage collection..."
    nix-collect-garbage -d
    print_header "Optimizing nix store..."
    nix store optimise
else
    print_header "Skipping cleanup (use --cleanup flag to enable)"
fi
