#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# Verify we're running on macOS
if [[ "$(uname)" != "Darwin" ]]; then
    printf "\033[1;31m✗ Error: This script only works on macOS (Darwin)\033[0m\n"
    exit 1
fi

# Parse flags
CLEANUP=false
while [[ $# -gt 0 ]]; do
    case $1 in
        --cleanup)
            CLEANUP=true
            shift
            ;;
        *)
            printf "Unknown option: %s\n" "$1"
            printf "Usage: %s [--cleanup]\n" "$0"
            exit 1
            ;;
    esac
done

# Update dotfiles
printf "\n\033[1m>> Updating dotfiles...\033[0m\n\n"
git -C "$HOME/dotfiles" pull

# Update flake inputs
printf "\n\033[1m>> Updating config flake inputs...\033[0m\n\n"
nix flake update --flake "$HOME/.config/nix"

# Detect hostname and verify it exists in flake
printf "\n\033[1m>> Detecting system configuration...\033[0m\n\n"
HOSTNAME=$(scutil --get LocalHostName)
printf "Hostname: %s\n" "$HOSTNAME"

# Verify the configuration exists in the flake
if ! nix eval "$HOME/.config/nix#darwinConfigurations.$HOSTNAME.config.system.stateVersion" &>/dev/null; then
    printf "\n\033[1;31m✗ Error: Configuration for hostname '%s' not found in flake\033[0m\n" "$HOSTNAME"
    printf "Available configurations:\n"
    nix eval --json "$HOME/.config/nix#darwinConfigurations" --apply 'builtins.attrNames' 2>/dev/null | grep -o '"[^"]*"' | tr -d '"'
    exit 1
fi

# Rebuild and apply config flake
printf "\n\033[1m>> Rebuilding and applying config flake...\033[0m\n\n"
sudo darwin-rebuild switch --flake "$HOME/.config/nix#$HOSTNAME"

# Nix garbage collection and store optimization (optional)
if [ "$CLEANUP" = true ]; then
    printf "\n\033[1m>> Running nix garbage collection...\033[0m\n\n"
    nix-collect-garbage -d
    printf "\n\033[1m>> Optimizing nix store...\033[0m\n\n"
    nix store optimise
else
    printf "\n\033[1m>> Skipping cleanup (use --cleanup flag to enable)\033[0m\n\n"
fi
