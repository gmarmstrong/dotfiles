#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

dotfiles_path="$HOME/dotfiles"
flake_path="$HOME/.config/nix"
hostname=$(hostname -s)
log_dir="$HOME/Library/Logs/system-update/$(date +%Y%m%d-%H%M%S)"


print_header() {
    printf "\n\033[1m>> %s\033[0m\n\n" "$1"
}

print_error() {
    printf "\n\033[1;31m✗ Error: %s\033[0m\n" "$1" >&2
}

print_warning() {
    printf "\n\033[1;33m⚠ Warning: %s\033[0m\n" "$1"
}

run_logged() {
    local operation_name="$1"
    local success_msg="$2"
    shift 2

    mkdir -p "$log_dir"
    local log_file
    log_file="$log_dir/${operation_name}.log"

    if "$@" > "$log_file" 2>&1; then
        printf "%s ✓\n" "$success_msg"
    else
        printf "\n%s failed:\n\n" "$operation_name"
        tail -n 30 "$log_file"
        printf "\nFull log: %s\n" "$log_file"
        exit 1
    fi
}

### Pre-run checks ###

parse_flags() {
    cleanup=false
    while [[ $# -gt 0 ]]; do
        case $1 in
            --cleanup)
                cleanup=true
                shift
                ;;
            *)
                printf "Unknown option: %s\n" "$1"
                printf "Usage: %s [--cleanup]\n" "$0"
                exit 1
                ;;
        esac
    done
}

verify_macos() {
    if [[ "$(uname)" != "Darwin" ]]; then
        print_error "This script only works on macOS (Darwin)"
        exit 1
    fi
}

check_network() {
    print_header "Checking network connectivity..."

    local hosts=("8.8.8.8" "1.1.1.1" "cache.nixos.org")
    local host
    for host in "${hosts[@]}"; do
        if ping -c 1 -W 2 "$host" &>/dev/null; then
            printf "Network connectivity verified ✓\n"
            return 0
        fi
    done

    print_error "No network connectivity detected. Cannot proceed with updates."
    printf "Tried hosts: %s\n" "${hosts[*]}"
    exit 1
}

### Main functions ###

update_dotfiles() {
    print_header "Updating dotfiles..."

    # Check for uncommitted changes
    if ! git -C "$dotfiles_path" diff-index --quiet HEAD --; then
        print_warning "Dotfiles have uncommitted changes. Skipping pull step."
    else
        run_logged "dotfiles" "Dotfiles updated" \
            git -C "$dotfiles_path" pull
    fi
}

update_flake_inputs() {
    print_header "Updating config flake inputs..."
    run_logged "flake" "Flake inputs updated" \
        nix flake update --flake "$flake_path"
}

detect_and_verify_config() {
    # Verify the configuration exists in the flake
    if ! nix eval "$flake_path#darwinConfigurations.$hostname.config.system.stateVersion" &>/dev/null; then
        print_error "Configuration for hostname '$hostname' not found in flake"
        printf "Available configurations:\n"
        nix eval --json "$flake_path#darwinConfigurations" --apply 'builtins.attrNames' 2>/dev/null | grep -o '"[^"]*"' | tr -d '"'
        exit 1
    fi
}

rebuild_system() {
    print_header "Rebuilding and applying config flake..."
    
    # Get current generation
    local current_gen
    current_gen=$(readlink /nix/var/nix/profiles/system 2>/dev/null | grep -o '[0-9]\+' || echo "unknown")
    printf "Current generation: %s\n" "$current_gen"
    
    run_logged "rebuild" "System rebuilt successfully" \
        sudo darwin-rebuild switch --flake "$flake_path#$hostname"
    
    # Show new generation
    local new_gen
    new_gen=$(readlink /nix/var/nix/profiles/system 2>/dev/null | grep -o '[0-9]\+' || echo "unknown")
    printf "New generation: %s\n" "$new_gen"
}

run_cleanup() {
    if [ "$cleanup" = true ]; then
        print_header "Running nix garbage collection..."
        run_logged "gc" "Garbage collection completed" \
            nix-collect-garbage -d

        print_header "Optimizing nix store..."
        run_logged "optimize" "Store optimization completed" \
            nix store optimise
    else
        printf "\nSkipping cleanup (use --cleanup to enable)\n"
    fi
}

### Main execution ###

verify_macos
parse_flags "$@"
check_network
update_dotfiles
update_flake_inputs
detect_and_verify_config
rebuild_system
run_cleanup

if [ -d "$log_dir" ] && [ -n "$(ls -A "$log_dir" 2>/dev/null)" ]; then
    printf "\nLogs saved to: %s\n" "$log_dir"
fi
