#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# Configuration
dotfiles_path="$HOME/dotfiles"
flake_path="$HOME/.config/nix"
hostname=$(hostname -s)

# Print functions
print_header() {
    printf "\n\033[1m>> %s\033[0m\n\n" "$1"
}

print_error() {
    printf "\n\033[1;31m✗ Error: %s\033[0m\n" "$1" >&2
}

print_warning() {
    printf "\n\033[1;33m⚠ Warning: %s\033[0m\n" "$1"
}

# Verify we're running on macOS
verify_macos() {
    if [[ "$(uname)" != "Darwin" ]]; then
        print_error "This script only works on macOS (Darwin)"
        exit 1
    fi
}

# Parse command line flags
parse_flags() {
    cleanup=false
    while [[ $# -gt 0 ]]; do
        case $1 in
            --cleanup)
                cleanup=true
                shift
                ;;
            *)
                printf "Unknown option: %s\n" "$1"
                printf "Usage: %s [--cleanup]\n" "$0"
                exit 1
                ;;
        esac
    done
}

# Main functions
update_dotfiles() {
    print_header "Updating dotfiles..."
    
    # Check for uncommitted changes
    if ! git -C "$dotfiles_path" diff-index --quiet HEAD --; then
        print_warning "Dotfiles have uncommitted changes. Skipping pull step."
    else
        git -C "$dotfiles_path" pull
    fi
}

update_flake_inputs() {
    print_header "Updating config flake inputs..."
    nix flake update --flake "$flake_path"
}

detect_and_verify_config() {
    print_header "Detecting system configuration..."
    printf "Hostname: %s\n" "$hostname"
    
    # Verify the configuration exists in the flake
    if ! nix eval "$flake_path#darwinConfigurations.$hostname.config.system.stateVersion" &>/dev/null; then
        print_error "Configuration for hostname '$hostname' not found in flake"
        printf "Available configurations:\n"
        nix eval --json "$flake_path#darwinConfigurations" --apply 'builtins.attrNames' 2>/dev/null | grep -o '"[^"]*"' | tr -d '"'
        exit 1
    fi
}

rebuild_system() {
    print_header "Rebuilding and applying config flake..."
    sudo darwin-rebuild switch --flake "$flake_path#$hostname"
}

run_cleanup() {
    if [ "$cleanup" = true ]; then
        print_header "Running nix garbage collection..."
        nix-collect-garbage -d
        print_header "Optimizing nix store..."
        nix store optimise
    else
        print_header "Skipping cleanup (use --cleanup flag to enable)"
    fi
}

verify_macos
parse_flags "$@"
update_dotfiles
update_flake_inputs
detect_and_verify_config
rebuild_system
run_cleanup
